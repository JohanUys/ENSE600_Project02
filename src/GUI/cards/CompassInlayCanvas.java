package GUI.cards;

import java.awt.*;
import LOGIC.Wind;
import LOGIC.Direction;

public class CompassInlayCanvas extends javax.swing.JPanel {

    // PROPERTIES ==============================================================
    private final Wind wind;

    // CONSTRUCTOR =============================================================
    public CompassInlayCanvas(Wind wind) {
        this.wind = wind;
        setOpaque(false); // Allow the background map to show through
        setPreferredSize(new Dimension(100, 100)); // Adjust size as needed
        initComponents();
    }

    // METHODS =================================================================
    // Draw the compass
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;

        // Anti-aliasing for smoother text and lines
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Center of the compass
        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;
        int radius = 30;

        // Draw compass circle
        g2.setColor(new Color(0, 0, 0, 100)); // semi-transparent black
        g2.fillOval(centerX - radius, centerY - radius, radius * 2, radius * 2);

        g2.setColor(Color.BLACK);
        g2.setStroke(new BasicStroke(2));
        g2.drawOval(centerX - radius, centerY - radius, radius * 2, radius * 2);

        // Cardinal direction labels
        g2.setFont(new Font("Arial", Font.BOLD, 10));
        g2.drawString("N", centerX - 4, centerY - radius + 12);
        g2.drawString("S", centerX - 4, centerY + radius - 2);
        g2.drawString("E", centerX + radius - 10, centerY + 4);
        g2.drawString("W", centerX - radius + 2, centerY + 4);

        // Wind direction arrow
        Direction windDirection = wind.getDirection();
        int directionId = windDirection.getID(); // 0 to 7

        // Adjust angle so NORTH is up
        double angleRad = Math.toRadians(90 - directionId * 45);
        int arrowLength = 15;
        int arrowX = centerX + (int)(Math.cos(angleRad) * arrowLength);
        int arrowY = centerY - (int)(Math.sin(angleRad) * arrowLength); // Y is inverted in Swing

        g2.setColor(Color.BLUE);
        g2.drawLine(centerX, centerY, arrowX, arrowY);
        g2.fillOval(arrowX - 3, arrowY - 3, 6, 6); // arrow tip

        // Wind speed text
        String windText = wind.getSpeed() + " kn " + windDirection.name();
        g2.setFont(new Font("Arial", Font.PLAIN, 10));
        g2.setColor(Color.BLACK);
        g2.drawString(windText, 5, getHeight() - 5);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}