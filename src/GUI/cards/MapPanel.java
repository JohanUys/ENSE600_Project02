package GUI.cards;

import GUI.*;
import LOGIC.*;
import java.awt.Dimension;
import java.awt.Point;
import javax.swing.SwingUtilities;

public class MapPanel extends javax.swing.JPanel {

    // Properties ==============================================================
    private final MainFrame mainFrame;
    private final CardsPanel cardsPanel;
    private final PlayerPanel playerPanel;
    private final Game game;
    private final Map map;
    private final MapCanvas mapCanvas;

    // Constructor =============================================================
    public MapPanel(MainFrame mainFrame, CardsPanel cardsPanel, Game game) {
        this.mainFrame = mainFrame;
        this.cardsPanel = cardsPanel;
        this.game = game;
        this.map = game.getMap();
        this.mapCanvas = new MapCanvas(map);
        this.playerPanel = mainFrame.getPlayerPanel();
        initComponents();
        if (!map.getPorts().isEmpty()) {
            Port currentPort = game.getPort();
            mapCanvas.setCurrentPort(currentPort);
        }
    }

    // Methods =================================================================
    // Player travels to the selected port and the map is updated
    private void travelToSelectedPort(Object selectedItem) {
        if (selectedItem == null) return;
        Port selectedPort = map.getPorts().get((String) selectedItem);
        centerMapOnPort(selectedPort);
        if (selectedPort == null) return;

        // Use the new Game method to travel
        game.travelToPort(selectedPort);

        // Update the map canvas highlight
        mapCanvas.setCurrentPort(selectedPort);
        
        // Center map on current port
        centerMapOnPort(selectedPort);

        // Refresh UI
        repaint();
    }
    
// Center the scrollpane's viewport on the initial port
    public void centerMapOnInitialPort() {
        if (!map.getPorts().isEmpty()) {
            Port currentPort = game.getPort();
            mapCanvas.setCurrentPort(currentPort);

            // Use invokeLater to ensure layout is done before centering
            SwingUtilities.invokeLater(() -> centerMapOnPort(currentPort));
        }
    }

    // Center the scrollpane's viewport on the current port
    private void centerMapOnPort(Port port) {
        if (port == null) return;

        int portX = port.getLongitude();
        int portY = port.getLatitude();

        mapCanvas.revalidate();
        mapCanvas.repaint();
        scrollPaneMap.getViewport().revalidate();
        scrollPaneMap.getViewport().repaint();

        Dimension viewportSize = scrollPaneMap.getViewport().getExtentSize();
        Dimension canvasSize = mapCanvas.getPreferredSize();

        // Center viewport on the port
        int viewX = portX - viewportSize.width / 2;
        int viewY = portY - viewportSize.height / 2;

        // Clamp the view position to stay within canvas bounds
        viewX = Math.max(0, Math.min(viewX, canvasSize.width - viewportSize.width));
        viewY = Math.max(0, Math.min(viewY, canvasSize.height - viewportSize.height));

        scrollPaneMap.getViewport().setViewPosition(new Point(viewX, viewY));
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneMap = new javax.swing.JScrollPane();
        comboBoxPortList = new javax.swing.JComboBox<>();
        buttonTravel = new javax.swing.JButton();
        buttonViewPort = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(394, 299));

        scrollPaneMap.setViewportView(mapCanvas);

        comboBoxPortList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rhymek", "HavenPort", "Iglag", "Ludwig", "Port Royal" }));

        buttonTravel.setText("Travel");
        buttonTravel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTravelActionPerformed(evt);
            }
        });

        buttonViewPort.setText("View Port");
        buttonViewPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewPortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPaneMap, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxPortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTravel)
                    .addComponent(buttonViewPort))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneMap)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBoxPortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonTravel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonViewPort)
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Component Methods========================================================
    // When the 'travel' button is clicked the player panel is updated and the player travels to the selected port
    private void buttonTravelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTravelActionPerformed
        travelToSelectedPort(comboBoxPortList.getSelectedItem());
        playerPanel.updateDisplay();
    }//GEN-LAST:event_buttonTravelActionPerformed
    // When the 'view port' button is clicked the port, marlet and shipyard panels are updated and the card changes to the current port
    private void buttonViewPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewPortActionPerformed
        cardsPanel.showCard("PortPanel");
        cardsPanel.updateAllPanels();
    }//GEN-LAST:event_buttonViewPortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTravel;
    private javax.swing.JButton buttonViewPort;
    private javax.swing.JComboBox<String> comboBoxPortList;
    private javax.swing.JScrollPane scrollPaneMap;
    // End of variables declaration//GEN-END:variables
}

